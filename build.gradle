plugins {
    id 'com.marklogic.ml-data-hub' version "5.4.2"
    id "java-library"
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation "com.marklogic:marklogic-data-hub:5.4.2"
}

// Generate a temporary certificate so some SSL tests will work.
ext {
    def command = new com.marklogic.appdeployer.command.security.GenerateTemporaryCertificateCommand()
    command.setTemplateIdOrName("data-hub-test-template")
    command.setCommonName("localhost")
    command.setValidFor(365)
    mlAppDeployer.commands.add(command)
}

task javaClientTest(type: JavaExec) {
    description = "Runs a program that attempts to connect to 8010 using TLSv1.2 with the Java Client"
    mainClass = "org.example.JavaClientTest"
    classpath = sourceSets.main.runtimeClasspath
}

task hubTest(type: JavaExec) {
    description = "Runs a program that attempts to connect to 8010 using DHF's HubConfig class"
    mainClass = "org.example.HubTest"
    classpath = sourceSets.main.runtimeClasspath
}

task disableProtocols(type: com.marklogic.gradle.task.ServerEvalTask) {
    description = "Disable all SSL protocols except TLSv1.2"
    xquery = """
import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let \$config := admin:get-configuration()
  let \$appServer := admin:appserver-get-id(\$config,admin:group-get-id(\$config, "Default"),"data-hub-STAGING")

  return admin:save-configuration(admin:appserver-set-ssl-disabled-protocols(\$config, \$appServer, ("SSLv3","TLSv1","TLSv1_1")))
"""
}

task disableTLSv1_2(type: com.marklogic.gradle.task.ServerEvalTask) {
    description = "Disable only the TLSv1.2 protocol"
    xquery = """
import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let \$config := admin:get-configuration()
  let \$appServer := admin:appserver-get-id(\$config,admin:group-get-id(\$config, "Default"),"data-hub-STAGING")

  return admin:save-configuration(admin:appserver-set-ssl-disabled-protocols(\$config, \$appServer, ("TLSv1_2")))
"""
}